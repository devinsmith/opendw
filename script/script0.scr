Disassembling script0.bin (1148 bytes)

0x0000: .byte
0x0001: ui_header $("Interplay")
0x0009: call 0x032a
0x000C: jc 0x0090

# Saved game
0x000F: draw_rectangle 0x09, 0x40, 0x1f, 0x70
0x0014: set_msg $("Do you wish to..\r\rBegin a new game\rContinue an old game")
0x003B: wait_event 0x0000, 'B', 0x0045, 'C', 0x02df, 0xff
0x0045: draw_rectangle 0x05, 0x38, 0x23, 0x80
0x004A: set_msg $("Starting a new game will destroy your last saved game. Do you still wish to start a new game?\r\r")
0x0089: prompt 'Y', 'N'
0x008A: jz 0x0090
0x008D: jmp 0x000f

# Main menu
0x0090: call 0x03cc
0x0093: draw_rectangle 0x04, 0x20, 0x24, 0x98
0x0098: set_msg $("Current party...\r\r")
0x00A6: loop call 0x00f6
0x00A9: word_3AE4 = gamestate[0x1F]
0x00AB: cmp word_3AE4, 0x07
0x00AD: jz 0x00cf
0x00B0: gamestate[0x41] = 0
0x00B2: loop call 0x00ed
0x00B5: word_3AE4 = gamestate[0x41]
0x00B7: cmp word_3AE4, 0x04
0x00B9: jc 0x00cf
0x00BC: set_msg $("\rCreate character\r")
0x00CA: word_3AE2 = 0xc3
0x00CC: jmp 0x00d1
0x00CF: word_3AE2 = 0x80
0x00D1: op_14 0x00e3
0x00D4: set_msg $("\rBegin the game")
0x00E0: wait_event 0x0000, 'C', 0x020a, 'B', 0x02df, 0x01, 0x04, 0x01, 0xff
0x00ED: word_3AE2 = get_char_data 0x4d
0x00EF: test word_3AE2
0x00F0: jnz 0x00f5
0x00F3: inc [mem] 0x41
0x00F5: loop ret
0x00F6: word_3AE2 = gamestate[0x06]
0x00F8: op_30 0x31
0x00FA: write_number
0x00FB: set_msg $(") ")
0x00FF: write_character_name
0x0100: word_3AE2 = 0x8d
0x0102: write_number
0x0103: loop ret
0x0104: draw_rectangle 0x04, 0x20, 0x24, 0x98
0x0109: set_msg $("Do you wish to..\r\rDelete ")
0x011C: write_character_name
0x011D: set_msg $("\rRename ")
0x0125: write_character_name
0x0126: set_msg $("\rView ")
0x012D: write_character_name
0x012E: wait_event 0x8300, 'D', 0x0184, 'R', 0x013e, 'V', 0x017d, "ESC", 0x0093, 0xff
0x013E: draw_rectangle 0x0c, 0x30, 0x1c, 0x68
0x0143: set_msg $("What will ")
0x014C: write_character_name
0x014D: set_msg $("'s new name be?\r\r")
0x015A: op_8D
0x015B: call 0x0161
0x015E: jmp 0x0104
0x0161: stc
0x0162: op_66 0xc6
0x0164: jz 0x017c
0x0167: word_3AE4 = 0
0x0168: op_0B 0xc6
0x016A: test word_3AE2
0x016B: jz 0x0174
0x016E: op_98 0x00
0x0170: if byte_3AE4 != 0x0C jmp 0x0168
0x0174: dec [mem]
0x0175: load_char_data 0x00
0x0177: op_38 0x7f
0x0179: op_98 0x00
0x017B: clc
0x017C: ret
0x017D: load_resource res: 0x0d, offset: 0x0000
0x0181: jmp 0x0104
0x0184: draw_and_set $("You are about to delete ")
0x0196: write_character_name
0x0197: set_msg $(". What has ")
0x01A1: write_character_name
0x01A2: set_msg $(" done to deserve such a fate??\r\rDelete ")
0x01BF: write_character_name
0x01C0: set_msg $(" forever.\rHave mercy.")
0x01D0: wait_event 0x0000, 'H', 0x0104, 'D', 0x01dd, "ESC", 0x0104, 0xff
0x01DD: draw_and_set $("Bye bye, ")
0x01E5: write_character_name
0x01E6: word_3AE2 = 0xae
0x01E8: write_number
0x01E9: word_3AE4 = gamestate[0x06]
0x01EB: word_3AE2 = 0x00
0x01ED: op_13 0x18
0x01EF: inc reg
0x01F0: check_gamestate 0x1f
0x01F2: jc 0x0204
0x01F5: dec [mem]
0x01F6: op_0B 0x0a
0x01F8: push (word|byte)
0x01F9: op_0B 0x0b
0x01FB: op_13 0x0a
0x01FD: peek_and_pop
0x01FE: op_13 0x0b
0x0200: inc reg
0x0201: jmp 0x01eb
0x0204: op_26 0x1f
0x0206: wait_escape
0x0207: jmp 0x0093
0x020A: op_19 0x1f, 0x06
0x020D: set loop = 0xff
0x020F: word_3AE2 = 0x00
0x0211: op_98 0x00
0x0213: loop 0x0211
0x0216: set loop = 0x0b
0x0218: set_gamestate: idx = 0x07
0x021A: op_69 0x0b
0x021C: loop 0x0218
0x021F: draw_rectangle 0x0c, 0x38, 0x1c, 0x68
0x0224: set_msg $("Name your new character.\r\r")
0x0237: op_8D
0x0238: call 0x0161
0x023B: jc 0x0093
0x023E: draw_rectangle 0x0b, 0x38, 0x1d, 0x68
0x0243: set_msg $("Is ")
0x0248: write_character_name
0x0249: set_msg $("\r\rMale or\rFemale?")
0x0258: wait_event 0x0000, 'M', 0x0262, 'F', 0x0267, 0xff
0x0262: word_3AE2 = 0x00
0x0264: jmp 0x0269
0x0267: word_3AE2 = 0x01
0x0269: set_char_prop 0x4e
0x026B: word_3AE2 = 0x01
0x026D: set_char_prop 0x4f
0x026F: word_3AE2 = 0x32
0x0271: set_char_prop 0x3b
0x0273: word_3AE2 = 0x0a
0x0275: set_char_prop 0x0d
0x0277: set_char_prop 0x0f
0x0279: set_char_prop 0x11
0x027B: set_char_prop 0x13
0x027D: set_char_prop 0x16
0x027F: load_resource res: 0x14, offset: 0x0000
0x0283: jz 0x02ce
0x0286: set_msg $("You still have ")
0x0292: op_81 word_3AE2
0x0293: set_msg $(" points left to distribute, do you wish to go back and distribute them?\r\r")
0x02C3: prompt 'Y', 'N'
0x02C4: jnz 0x02ce
0x02C7: load_resource res: 0x14, offset: 0x000a
0x02CB: jnz 0x0286
0x02CE: .word
0x02CF: word_3AE2 = get_char_data 0x1e
0x02D1: set_char_prop 0x1c
0x02D3: word_3AE2 = get_char_data 0x16
0x02D5: set_char_prop 0x14
0x02D7: set_char_prop 0x18
0x02D9: .byte
0x02DA: inc [mem] 0x1f
0x02DC: jmp 0x0093

# We jump here to Begin the game.
0x02DF: draw_ui_full
0x02E0: op_66 0x1f
0x02E2: jnz 0x0312

0x02E5: draw_rectangle 0x09, 0x40, 0x1f, 0x70
0x02EA: set_msg $("You must have someone in the party to begin the game!!")
0x030E: wait_escape
0x030F: jmp 0x0093

0x0312: ui_header $("Loading...")
0x031B: call 0x0463
0x031E: op_0C 0x03cb
0x0321: test word_3AE2
0x0322: js 0x0326
0x0325: op_1F
0x0326: op_57_res 0x01, 0x2f, 0x00

# Loads resource 7 (character data) and copies that data 1 byte at a time
# over to resource 1. There are two loops here:
#
# 1. Loop from 0xFF to 0
# 2. Loop from 0 to 0x0E
# Because each player record is 512 bytes, that is why we
# loop 7*2 (0xE) 14 times.

0x032A: word_3AE2 = 0x07
0x032C: word_3AE2 = load_resource(word_3AE2)
0x032D: gamestate[0x98] = word_3AE2
0x032F: gamestate[0x43] = 0x01
0x0332: .word
0x0333: gamestate[0x96] = 0
        gamestate[0x97] = 0
0x0335: gamestate[0x41] = 0
        gamestate[0x42] = 0
0x0337: .byte
0x0338: set loop = 0xff
0x033A: var offset = gamestate[0x96]
        offset += gamestate[0x97] << 8
        offset += word_3AE4
        word_3AE2 = resource_idx(gamestate[0x98])->bytes[offset]
        word_3AE2 += resource_idx(gamestate[0x98])->bytes[offset + 1] << 8
0x033C: store_data_resource 0x41
0x033E: loop 0x033a
0x0341: inc [mem] 0x42
0x0343: inc [mem] 0x97
0x0345: word_3AE2 = gamestate[0x42]
0x0347: cmp word_3EA2, 0x0e
0x0349: jnc 0x033a


# Cleanup
0x034C: word_3AE2 = gamestate[0x56]
0x034E: test word_3AE2
0x034F: jz 0x0353
0x0352: resource_release
0x0353: word_3AE2 = gamestate[0x5A]
0x0355: test word_3AE2
0x0356: jz 0x035a
0x0359: resource_release


# Populate gamestate 0x00-0x255 with values from resource 7 (0xe00 - 0xeff)
# This populates it backwards so 0xeff -> gamestate[0xff]
#                                0xefe -> gamestate[0xfe] .. etc.
#
# A "hole" from 0x98 - 0x96 is skipped because it is used by op_0F
0x035A: cmp word_3AE4, 0x96
0x035C: jnc 0x0364
0x035F: cmp word_3AE4, 0x99
0x0361: jnc 0x0368
0x0364: var offset = gamestate[0x96]
        offset += gamestate[0x97] << 8
        offset += word_3AE4
        word_3AE2 = resource_idx(gamestate[0x98])->bytes[offset]
        word_3AE2 += resource_idx(gamestate[0x98])->bytes[offset + 1] << 8
0x0366: op_13 0x00
0x0368: loop 0x035a

0x036B: gamestate[0x5b] = 0xFF
0x036D: gamestate[0x57] = 0xFF
0x036F: gamestate[0x5a] = 0xFF
0x0371: gamestate[0x56] = 0xFF

# Load rest of resource 7 into data_D760
0x0373: word_3AE4 = gamestate[0x98]
0x0375: push_byte(word_3AE4 & 0xFF)
0x0376: data_res = resource_get(pop_byte())
0x0377: .word
0x0378: set loop = 0xff
0x037A: word_3AE2 = 0x0f00
0x037D: memcpy(data_D760, data_res + word_3AE2, 0x700);


# Restore data_res back to running_script and release resource 7.
0x037E: .byte
0x037F: push_byte(running_script_idx)
0x0380: data_res = resource_get(pop_byte())
0x0381: word_3AE2 = gamestate[0x98]
0x0383: resource_release

# Is this a saved game?
0x0384: word_3AE2 = gamestate[0x02]
0x0386: cmp word_3EA2, 0xff
0x0388: jz 0x03c5

# Yes, it is a saved game.
0x038B: gamestate[0x04] = word_3AE2
0x038D: op_3A 0x80
0x038F: gamestate[0x57] = word_3AE2
0x0391: word_3AE2 = gamestate[0x02]
0x0393: op_30 0x46
0x0395: word_3AE2 = load_resource(word_3AE2)
0x0396: gamestate[0x56] = word_3AE2
0x0398: word_3AE2 = gamestate[0xDF]
0x039A: op_14 0x03cb
0x039D: word_3AE2 = 0x10
0x039F: word_3AE2 = load_resource(word_3AE2)
0x03A0: gamestate[0x98] = word_3AE2
0x03A2: word_3AE2 = gamestate[0x56]
0x03A4: .word
0x03A5: op_9E
0x03A6: op_27
0x03A7: op_21
0x03A8: op_38 0xff00
0x03AB: gamestate[0x54] = word_3AE2
0x03AD: gamestate[0x96] = word_3AE2
0x03AF: .byte
0x03B0: var offset = gamestate[0x96]
        offset += gamestate[0x97] << 8
        offset += word_3AE4
        word_3AE2 = resource_idx(gamestate[0x98])->bytes[offset]
        word_3AE2 += resource_idx(gamestate[0x98])->bytes[offset + 1] << 8
0x03B2: store_data_resource 0x54
0x03B4: loop 0x03b0
0x03B7: op_26 0x55
0x03B9: op_26 0x97
0x03BB: op_66 0x55
0x03BD: jns 0x03b0
0x03C0: word_3AE2 = gamestate[0x98]
0x03C2: resource_release
0x03C3: clc
0x03C4: ret

# No this a new game!
0x03C5: stc
0x03C6: word_3ADF[0x03cb] = 0xff # This writes 0xFF into the game script!!
0x03CA: ret

0x03CB: nop

# Cleanup
0x03CC: word_3AE2 = gamestate[0x56]
0x03CE: test word_3AE2
0x03CF: jz 0x03d3
0x03D2: resource_release
0x03D3: word_3AE2 = gamestate[0x5A]
0x03D5: test word_3AE2
0x03D6: jz 0x03da
0x03D9: resource_release

# Zero out portions of gamestate.
0x03DA: word_3AE2 = 0x00
0x03DC: set loop = 0xff
0x03DE: cmp word_3AE4, 0x1f
0x03E0: jz 0x03ef
0x03E3: cmp word_3AE4, 0x0a
0x03E5: jnc 0x03ed
0x03E8: cmp word_3AE4, 0x11
0x03EA: jnc 0x03ef
0x03ED: op_13 0x00
0x03EF: loop 0x03de


0x03F2: gamestate[0x00] = 0x0d
0x03F5: gamestate[0x01] = 0x14
0x03F8: gamestate[0x03] = 0x02
0x03FB: gamestate[0x02] = 0x01
0x03FE: gamestate[0x5b] = 0xFF
0x0400: gamestate[0x57] = 0xFF
0x0402: gamestate[0x5a] = 0xFF
0x0404: gamestate[0x56] = 0xFF

0x0406: .word
0x0407: word_3AE2 = 0x0700
0x040A: malloc(word_3AE2)
0x040B: gamestate[0x96] = 0x00
        gamestate[0x97] = 0x06
0x040F: .byte
0x0410: gamestate[0x98] = word_3AE2
0x0412: push (word|byte)
0x0413: data_res = resource_get(pop_byte())
0x0414: .word
0x0415: set loop = 0x00
0x0417: word_3AE2 = 0x0000
0x041A: memcpy 0x700
0x041B: .byte
0x041C: push_byte(running_script_idx)
0x041D: data_res = resource_get(pop_byte())
0x041E: set loop = 0xff
0x0420: word_3AE2 = 0x00
0x0422: store_data_resource 0x96
0x0424: loop 0x0422
0x0427: op_26 0x97
0x0429: op_66 0x97
0x042B: jnz 0x0422
0x042E: set loop = 0x50
0x0430: store_data_resource 0x96
0x0432: if byte_3AE4 != 0x00 jmp 0x0430
0x0436: word_3AE4 = gamestate[0x98]
0x0438: push_byte(word_3AE4 & 0xFF)
0x0439: data_res = resource_get(pop_byte())
0x043A: .word
0x043B: set loop = 0xff
0x043D: word_3AE2 = 0x0000
0x0440: memcpy 0x700
0x0441: .byte
0x0442: push_byte(running_script_idx)
0x0443: data_res = resource_get(pop_byte())
0x0444: word_3AE2 = gamestate[0x98]
0x0446: resource_release
0x0447: loop call 0x044f
0x044A: word_3ADF[0x03cb] = 0xff
0x044E: ret
0x044F: set loop = 0x0b
0x0451: word_3AE2 = 0x00
0x0453: set_gamestate: idx = 0x07
0x0455: op_69 0x0b
0x0457: loop 0x0453
0x045A: .word
0x045B: word_3AE2 = 0x0000
0x045E: set_char_prop 0x55
0x0460: set_char_prop 0x57
0x0462: loop ret

# Initializes some sort of game state.
0x0463: set loop = 0x09
0x0465: word_3AE2 = 0x57
0x0467: op_4F 0x99
0x0469: inc word_3AE2
0x046A: loop 0x0467
0x046D: loop call 0x0471
0x0470: ret

0x0471: word_3AE2 = get_char_data 0x4d
0x0473: test word_3AE2
0x0474: jz 0x047b
0x0477: op_30 0x4e56
0x047A: test word_3AE2
0x047B: loop ret
